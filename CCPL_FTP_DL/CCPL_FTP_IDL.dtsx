<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="1/4/2020 11:35:08 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="CCPL_SD01"
  DTS:CreatorName="CCPL_SD01\Administrator"
  DTS:DTSID="{C7BF71B8-2016-4947-AA0B-9DC42E97D232}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1301.433"
  DTS:LocaleID="1033"
  DTS:ObjectName="CCPL_FTP_IDL"
  DTS:PackageType="5"
  DTS:VersionBuild="110"
  DTS:VersionGUID="{6E058A69-E908-4E89-A08A-1567BEF8930E}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[CCPL]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{B0E998D0-8253-42CD-823A-DC34DE7DF30C}"
      DTS:ObjectName="CCPL">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[$Project::CCPL_ConnectionString]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=CCPL_SD01\CCPL_DEV;Initial Catalog=CCPL;Integrated Security=True;Application Name=SSIS-CCPL_FTP_IDL_Demo-{B0E998D0-8253-42CD-823A-DC34DE7DF30C}CCPL_SD01\CCPL_DEV.CCPL;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[CCPL_SD01\CCPL_DEV.CCPL]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{E72E6528-DE35-465D-A771-B2C3F074BCB6}"
      DTS:ObjectName="CCPL_SD01\CCPL_DEV.CCPL">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=CCPL_SD01\CCPL_DEV;Initial Catalog=CCPL;Integrated Security=True;Application Name=SSIS-CCPL_FTP_IDL-{E72E6528-DE35-465D-A771-B2C3F074BCB6}CCPL_SD01\CCPL_DEV.CCPL;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{EE38F0FD-13ED-4115-ABB8-7581769FF0B7}"
      DTS:ObjectName="FTP_CCPL_DownloadDirectory">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">E:\Projects\FTP_Image_RnD\FTPDownload\</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{AF42EC7F-1C05-407C-8744-F8779E67DAED}"
      DTS:ObjectName="FTP_CCPL_InputFolder">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">/TEDDY/</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{1F3DE0F9-2841-422D-92B9-1A46455E912C}"
      DTS:ObjectName="FTP_CCPL_ServerName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">192.168.13.213</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{F455B4E3-1F4B-4363-9A93-E144FB8C3B3D}"
      DTS:ObjectName="FTP_CCPL_ServerPassword">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">CITccplftp_007</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{7B72ABE3-C232-40E0-A1DB-AE892D4C8A6E}"
      DTS:ObjectName="FTP_CCPL_ServerPort">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">21</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{3A5AA815-A8DF-4767-B2EA-5B76AFA1DAAC}"
      DTS:ObjectName="FTP_CCPL_ServerUserName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">FTPDev01</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{2E2210ED-F880-4DAC-98C1-CB3C7836B3E1}"
      DTS:ObjectName="UploadDirectorytoDatabase_Connection">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{ED213A8B-364F-4666-A0F0-EB04A44AF179}"
      DTS:ObjectName="winSCPLog">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">true</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{978481D7-18ED-44CE-B5C3-BD6AD3CBB4DA}"
      DTS:ObjectName="winSCPLogPath">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">E:\Projects\FTP_Image_RnD\CCPL_FTP\CCPL_FTP_DL\</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{F3AA2C23-AAF5-4B37-93CC-2629CD73FA74}"
      DTS:ObjectName="winSCPPath">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">C:\Program Files (x86)\WinSCP\WinSCP.exe</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{82FA01CC-E1A8-42D7-B880-3BE9BCC61C32}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CustInputFolder">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6557C2CE-E43B-4DB6-A3D9-05987B5608B8}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CustomerID">
      <DTS:VariableValue
        DTS:DataType="8">CUST_0001</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{67F8FCCE-E761-4E97-8EC5-0D6068CD9E6A}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="CustomerLists">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EA4BE231-372C-42B3-A3AE-C903DAC7929B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CustSC">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{91D5BB5E-6189-4CE8-8E57-98D0A3A2E574}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="DownloadDirectories">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{85BDFC94-F10A-4B76-80B9-C2E7C8697472}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DownloadDirectory">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{168113FD-5924-4292-9127-3FE825466B36}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FtpWorkingDirectory">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{22E25A99-ADE8-444C-AB61-AA4132C00476}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="GETDATE()"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ProcessDT">
      <DTS:VariableValue
        DTS:DataType="7">1/22/2020 12:22:16 PM</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\DownloadAllFilesFromUploadedDirectory"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{13FE445D-57D9-4F61-8768-2722484EE162}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="DownloadAllFilesFromUploadedDirectory"
      DTS:ThreadHint="2">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_69a47c5b52644e2694f0c183176727c7"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::DownloadDirectory,$Package::FTP_CCPL_DownloadDirectory,$Package::FTP_CCPL_InputFolder,$Package::FTP_CCPL_ServerName,$Package::FTP_CCPL_ServerPassword,$Package::FTP_CCPL_ServerPort,$Package::FTP_CCPL_ServerUserName,$Package::winSCPLog,$Package::winSCPLogPath,$Package::winSCPPath">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_69a47c5b52644e2694f0c183176727c7.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{A18EB7F4-A4F3-4F83-B8A7-172E3E57EFC0}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_69a47c5b52644e2694f0c183176727c7</RootNamespace>
    <AssemblyName>ST_69a47c5b52644e2694f0c183176727c7</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="WinSCPnet, Version=1.6.5.10071, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\WinSCP\WinSCPnet.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using WinSCP;
using System.IO;
#endregion

namespace ST_69a47c5b52644e2694f0c183176727c7
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here

            String winscpPath = (string)Dts.Variables["$Package::winSCPPath"].GetSensitiveValue();
            string username = (string)Dts.Variables["$Package::FTP_CCPL_ServerUserName"].GetSensitiveValue();
            string password = (string)Dts.Variables["$Package::FTP_CCPL_ServerPassword"].GetSensitiveValue();
            string ftpSite = (string)Dts.Variables["$Package::FTP_CCPL_ServerName"].Value;
            string localPath = Dts.Variables["$Package::FTP_CCPL_DownloadDirectory"].Value.ToString();
            //string sshKey = Dts.Variables["sshKey"].Value.ToString();
            Boolean winSCPLog = Convert.ToBoolean(Dts.Variables["$Package::winSCPLog"].Value);
            string winSCPLogPath = Dts.Variables["$Package::winSCPLogPath"].Value.ToString();
            string remoteFTPDirectory = Dts.Variables["$Package::FTP_CCPL_InputFolder"].Value.ToString();
            int PortNumber = Convert.ToInt16(Dts.Variables["$Package::FTP_CCPL_ServerPort"].Value.ToString());

            TimeSpan span = new TimeSpan(0, 0, 2, 0, 0);

            //ArrayList directoryLists = new ArrayList();

            string DownloadDirectory = Dts.Variables["DownloadDirectory"].Value.ToString();

            SessionOptions sessionOptions = new SessionOptions
            {
                Protocol = Protocol.Ftp,
                HostName = ftpSite,
                UserName = username,
                Password = password,
                //SshHostKeyFingerprint = sshKey
                FtpMode = FtpMode.Passive,
                Timeout = span,
                TimeoutInMilliseconds = 120000,
            };

            try
            {
                using (Session session = new Session())
                {
                    // WinSCP .NET assembly must be in GAC to be used with SSIS,
                    // set path to WinSCP.exe explicitly, if using non-default path.
                    session.ExecutablePath = winscpPath;


                    if (winSCPLog)
                    {
                        session.SessionLogPath = @winSCPLogPath + @"WinscpSessionLogDL.txt";
                        session.DebugLogPath = @winSCPLogPath + @"WinscpDebugLogDL.txt";
                    }

                    // Connect
                    //session.Timeout = new TimeSpan(0, 2, 0); // two minutes
                    session.Timeout = span;
                    session.Open(sessionOptions);

                    //-----------Getting All Directory Structure from the Root Directory in FTP Server

       

                    string localFilePath =  RemotePath.TranslateRemotePathToLocal(DownloadDirectory, remoteFTPDirectory, localPath);



                    // Create local subdirectory, if it does not exist yet
                    if (!Directory.Exists(localFilePath))
                    {
                        Directory.CreateDirectory(localFilePath);
                    }

                    string remoteFilePath = RemotePath.EscapeFileMask(DownloadDirectory);



                    //TransferOperationResult transferResult =
                    //    session.GetFiles(remoteFilePath, localFilePath);

                    //// Did the download succeeded?
                    //if (!transferResult.IsSuccess)
                    //{
                    //    // Print error (but continue with other files)
                    //    Console.WriteLine(
                    //        "Error downloading file {0}: {1}",
                    //        fileInfo.FullName, transferResult.Failures[0].Message);
                    //}


                    ////-------------------------End Getting Root Directory                                                   

                    TransferOptions transferOptions = new TransferOptions();
                    transferOptions.TransferMode = TransferMode.Binary;

                    try
                    {
                        //session.GetFiles(remoteFTPDirectory + "/" + fileToDownload, localPath, false, transferOptions);
                        //session.GetFiles(remoteFTPDirectory , localPath, false, transferOptions);
                        session.GetFiles(DownloadDirectory, @localPath);

                    }
                    catch (Exception e)
                    {
                        Dts.Events.FireError(0, null,
                        string.Format("Error when using WinSCP to download file: {0}", e), null, 0);
                        Dts.TaskResult = (int)DTSExecResult.Failure;
                    }
                }
            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, null,
                string.Format("Error when using WinSCP to download file: {0}", e), null, 0);
                Dts.TaskResult = (int)DTSExecResult.Failure;
            }
            Dts.TaskResult = (int)ScriptResults.Success;


            //MessageBox.Show(Dts.Variables["DownloadDirectory"].Value.ToString());


			Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_69a47c5b52644e2694f0c183176727c7</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_69a47c5b52644e2694f0c183176727c7</msb:DisplayName>
    <msb:ProjectId>{32237724-D4B8-481E-951F-F2174279C44D}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_69a47c5b52644e2694f0c183176727c7.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69a47c5b52644e2694f0c183176727c7.Properties.Settings.get_Default():ST_69a47c5b52644e2694f0c183176727c7.Properties.Sett" +
    "ings")]

namespace ST_69a47c5b52644e2694f0c183176727c7.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_69a47c5b52644e2694f0c183176727c7")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_69a47c5b52644e2694f0c183176727c7")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69a47c5b52644e2694f0c183176727c7.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69a47c5b52644e2694f0c183176727c7.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69a47c5b52644e2694f0c183176727c7.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_69a47c5b52644e2694f0c183176727c7.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_69a47c5b52644e2694f0c183176727c7.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_69a47c5b52644e2694f0c183176727c7.dll">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
gQOiBAYAJAeiBA4AkARAAA4AmABAAA4AmwNAAAYASwc2AAYANwU2AA4AkgZAAA4ApABAAA4ADAdA
AAoAWQX4AwYAugCiBAYAJAGiBAYAxgCiBAYAPAcPBQAAAAAtAAAAAAABAAEAAQAQANIECQA5AAEA
AQAAABAA2AU0BlUAAQADAAABEAB6BjQGaQADAAcAAwEAALIGAABNAAQACgARAK4E+QARAEkB/QAR
AIQAAQEGBmYABQFWgKIGCAFWgCkBCAFQIAAAAACGANgEBgABADAjAAAAAIYYdwUGAAEAOCMAAAAA
gxh3BQYAAQBAIwAAAACTCEUFDAEBAGwjAAAAAJMIMQERAQEAcyMAAAAAkwg9ARYBAQB7IwAAAACW
CPEGHAECAIIjAAAAAIYYdwUGAAIAiiMAAAAAkRh9BSEBAgAAAAEAXwMJAHcFAQARAHcFBgAZAHcF
CgApAHcFEAAxAHcFEAA5AHcFEABBAHcFEABJAHcFEABRAHcFEABZAHcFEABhAHcFEABpAHcFBgCh
AHcFBgDJAHcFFQDZAHcFBgBxAKoGMgDhAGMGNwDpAJkEPADxAE0DQgDxAEMDQgCpAH8DRgABAboE
SgABAQEATwB5AHcFVACBAHcFBgCBAIwEXQCBAPcAEACBAOoAEACBAHcAEACBAJQAZACBACwHawCB
AJcFAQCJAHcFBgCJAIgDEAD5ANIGcQCJALcDEACJAKYDEACJACwHawCJAM0EdwAZASEEfQAhAcsG
hAAhAUUHiQAZAcoDkAAxAXcFBgAxAaAAlQCJAHEGnADhAMAGqAD5ANkGrgBJAW0FtADhAP0GAQBR
AY0BBgBxAHcFBgCpAHcFBgBZAdgAvQBZATgHxgCxAHcFzADRAHcFBgAIABQA7wAIABgA9AApAHMA
XAEuAAsANAEuABMAPQEuABsAXAEuACMAZQEuACsAjgEuADMAjgEuADsAjgEuAEMAZQEuAEsAlAEu
AFMAjgEuAFsAqwFDAGMA9ABJAHMAXAFhAHsA9ABjAGsA9AAbAAMAAQAEAAMAAABJBSUBAABRASoB
AAD1Bi8BAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcABIAAAAEAAACRHEOBAAAAAAAACQAAAAQAAAAA
AAAAAAAAANQAbgAAAAAADgAAAAAAAAAAAAAA3QDZAwAAAAABAAYABQBXJwAAAADmAOcGAAAAAAQA
AAAAAAAAAAAAANQAogQAAAAADgAAAAAAAAAAAAAA3QBHAAAAAAAAAAAAAQAAAOIFAAAFAAIAAAAA
VG9JbnQxNgBTVF82OWE0N2M1YjUyNjQ0ZTI2OTRmMGMxODMxNzY3MjdjNwA8TW9kdWxlPgBTeXN0
ZW0uSU8AV2luU0NQAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAG1zY29y
bGliAHNldF9QYXNzd29yZABkZWZhdWx0SW5zdGFuY2UAc2V0X0Z0cE1vZGUAc2V0X1RyYW5zZmVy
TW9kZQBWYXJpYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhh
bmRsZQBzZXRfVXNlck5hbWUAc2V0X0hvc3ROYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1
bnRpbWUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVy
ZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UARGlz
cG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1
Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3Nh
YmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRy
aWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJp
YnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNB
dHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmli
dXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRy
aWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAEdldFNlbnNpdGl2
ZVZhbHVlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAc2V0X0V4ZWN1
dGFibGVQYXRoAFJlbW90ZVBhdGgAc2V0X0RlYnVnTG9nUGF0aABzZXRfU2Vzc2lvbkxvZ1BhdGgA
RXNjYXBlRmlsZU1hc2sATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVHJhbnNsYXRlUmVtb3RlUGF0aFRvTG9jYWwA
U2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUXzY5YTQ3YzViNTI2NDRl
MjY5NGYwYzE4MzE3NjcyN2M3LmRsbABzZXRfUHJvdG9jb2wAZ2V0X0l0ZW0AU3lzdGVtAEVudW0A
cmVzb3VyY2VNYW4AVG9Cb29sZWFuAFRpbWVTcGFuAE9wZW4AU2NyaXB0TWFpbgBTZXNzaW9uAFN5
c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9u
AEV4Y2VwdGlvbgBDdWx0dXJlSW5mbwBEaXJlY3RvcnlJbmZvAGdldF9SZXNvdXJjZU1hbmFnZXIA
RXZlbnRzT2JqZWN0V3JhcHBlcgBGaXJlRXJyb3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9z
dGljcwBzZXRfVGltZW91dEluTWlsbGlzZWNvbmRzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vy
dmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF82OWE0N2M1YjUyNjQ0ZTI2OTRmMGMxODMxNzY3Mjdj
Ny5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfNjlhNDdj
NWI1MjY0NGUyNjk0ZjBjMTgzMTc2NzI3YzcuUHJvcGVydGllcwBnZXRfVmFyaWFibGVzAEdldEZp
bGVzAFNldHRpbmdzAFNlc3Npb25PcHRpb25zAFRyYW5zZmVyT3B0aW9ucwBTdWNjZXNzAGdldF9E
dHMAU2NyaXB0UmVzdWx0cwBnZXRfRXZlbnRzAEV4aXN0cwBDb25jYXQARm9ybWF0AE9iamVjdABX
aW5TQ1BuZXQAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQAVHJhbnNmZXJPcGVyYXRpb25SZXN1
bHQAQ29udmVydABzZXRfVGltZW91dABnZXRfQXNzZW1ibHkAQ3JlYXRlRGlyZWN0b3J5AAAAAAAp
JABQAGEAYwBrAGEAZwBlADoAOgB3AGkAbgBTAEMAUABQAGEAdABoAABDJABQAGEAYwBrAGEAZwBl
ADoAOgBGAFQAUABfAEMAQwBQAEwAXwBTAGUAcgB2AGUAcgBVAHMAZQByAE4AYQBtAGUAAEMkAFAA
YQBjAGsAYQBnAGUAOgA6AEYAVABQAF8AQwBDAFAATABfAFMAZQByAHYAZQByAFAAYQBzAHMAdwBv
AHIAZAAAOyQAUABhAGMAawBhAGcAZQA6ADoARgBUAFAAXwBDAEMAUABMAF8AUwBlAHIAdgBlAHIA
TgBhAG0AZQAASSQAUABhAGMAawBhAGcAZQA6ADoARgBUAFAAXwBDAEMAUABMAF8ARABvAHcAbgBs
AG8AYQBkAEQAaQByAGUAYwB0AG8AcgB5AAAnJABQAGEAYwBrAGEAZwBlADoAOgB3AGkAbgBTAEMA
UABMAG8AZwAALyQAUABhAGMAawBhAGcAZQA6ADoAdwBpAG4AUwBDAFAATABvAGcAUABhAHQAaAAA
PSQAUABhAGMAawBhAGcAZQA6ADoARgBUAFAAXwBDAEMAUABMAF8ASQBuAHAAdQB0AEYAbwBsAGQA
ZQByAAA7JABQAGEAYwBrAGEAZwBlADoAOgBGAFQAUABfAEMAQwBQAEwAXwBTAGUAcgB2AGUAcgBQ
AG8AcgB0AAAjRABvAHcAbgBsAG8AYQBkAEQAaQByAGUAYwB0AG8AcgB5AAAtVwBpAG4AcwBjAHAA
UwBlAHMAcwBpAG8AbgBMAG8AZwBEAEwALgB0AHgAdAAAKVcAaQBuAHMAYwBwAEQAZQBiAHUAZwBM
AG8AZwBEAEwALgB0AHgAdAAAW0UAcgByAG8AcgAgAHcAaABlAG4AIAB1AHMAaQBuAGcAIABXAGkA
bgBTAEMAUAAgAHQAbwAgAGQAbwB3AG4AbABvAGEAZAAgAGYAaQBsAGUAOgAgAHsAMAB9AABxUwBU
AF8ANgA5AGEANAA3AGMANQBiADUAMgA2ADQANABlADIANgA5ADQAZgAwAGMAMQA4ADMAMQA3ADYA
NwAyADcAYwA3AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAAABh
6CetpIs9Rb72aN2zBh6eAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFhFgcPDg4ODg4CDg4RPQ4S
QRJFDhJJEkkEIAAScQQgABJ1BSABEnkcAyAAHAMgAA4EAAECHAQAAQYOCCAFAQgICAgIBiABARGA
hQYgAQERgIkFIAEBET0FAAIODg4FIAEBEkEGAAMODg4OBAABAg4GAAESgJUOBAABDg4GIAEBEYCd
CyAEEoChDg4CEoCZBSAAEoClBQACDg4cCCAFAggODg4ICAABEoCtEYCxBSAAEoC1ByACAQ4SgLUI
t3pcVhk04IkIiYRdzYCAzJEIInHsSjxW0L8EAAAAAAQBAAAAAwYSWQMGEl0DBhIQAgYIAwYRFAQA
ABJZBAAAEl0FAAEBEl0EAAASEAMAAAEECAASWQQIABJdBAgAEhAIAQAIAAAAAAAeAQABAFQCFldy
YXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzY5YTQ3YzViNTI2NDRlMjY5NGYw
YzE4MzE3NjcyN2M3AAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjAAAEkBABouTkVURnJhbWV3
b3JrLFZlcnNpb249djQuNQEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsg
NC41AAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBt
c2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2Vu
PWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAA
AAAAAAAAAABQQURQQURQtAAAAIA2AAAAAAAAAAAAAJo2AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAA
AACMNgAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgA
AABYQAAAGgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAA
AL0E7/4AAAEAAAABAEOBkRwAAAEAQ4GRHD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAA
AQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAA
AAAAAACwBHoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAA
MAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5
AE4AYQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAA
UwBUAF8ANgA5AGEANAA3AGMANQBiADUAMgA2ADQANABlADIANgA5ADQAZgAwAGMAMQA4ADMAMQA3
ADYANwAyADcAYwA3AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcA
MwAxADMALgAzADMAMAA5ADEAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBU
AF8ANgA5AGEANAA3AGMANQBiADUAMgA2ADQANABlADIANgA5ADQAZgAwAGMAMQA4ADMAMQA3ADYA
NwAyADcAYwA3AC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABD
AG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAyADAAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEA
ZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBt
AGUAAABTAFQAXwA2ADkAYQA0ADcAYwA1AGIANQAyADYANAA0AGUAMgA2ADkANABmADAAYwAxADgA
MwAxADcANgA3ADIANwBjADcALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAA
AAAAUwBUAF8ANgA5AGEANAA3AGMANQBiADUAMgA2ADQANABlADIANgA5ADQAZgAwAGMAMQA4ADMA
MQA3ADYANwAyADcAYwA3AAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAu
ADAALgA3ADMAMQAzAC4AMwAzADAAOQAxAAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUA
cgBzAGkAbwBuAAAAMQAuADAALgA3ADMAMQAzAC4AMwAzADAAOQAxAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAKw2AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\DownloadAllFilesFromUploadedDirectory 1"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{bbeb42c6-2086-46df-82d8-6f45178e5e0c}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="DownloadAllFilesFromUploadedDirectory 1"
      DTS:ThreadHint="3">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_abac516154624acca29877030ed726cc"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::DownloadDirectory,$Package::FTP_CCPL_DownloadDirectory,$Package::FTP_CCPL_InputFolder,$Package::FTP_CCPL_ServerName,$Package::FTP_CCPL_ServerPassword,$Package::FTP_CCPL_ServerPort,$Package::FTP_CCPL_ServerUserName,$Package::winSCPLog,$Package::winSCPLogPath,$Package::winSCPPath">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69a47c5b52644e2694f0c183176727c7.Properties.Settings.get_Default():ST_69a47c5b52644e2694f0c183176727c7.Properties.Sett" +
    "ings")]

namespace ST_69a47c5b52644e2694f0c183176727c7.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using WinSCP;
using System.IO;
#endregion

namespace ST_69a47c5b52644e2694f0c183176727c7
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here

            String winscpPath = (string)Dts.Variables["$Package::winSCPPath"].GetSensitiveValue();
            string username = (string)Dts.Variables["$Package::FTP_CCPL_ServerUserName"].GetSensitiveValue();
            string password = (string)Dts.Variables["$Package::FTP_CCPL_ServerPassword"].GetSensitiveValue();
            string ftpSite = (string)Dts.Variables["$Package::FTP_CCPL_ServerName"].Value;
            string localPath = Dts.Variables["$Package::FTP_CCPL_DownloadDirectory"].Value.ToString();
            //string sshKey = Dts.Variables["sshKey"].Value.ToString();
            Boolean winSCPLog = Convert.ToBoolean(Dts.Variables["$Package::winSCPLog"].Value);
            string winSCPLogPath = Dts.Variables["$Package::winSCPLogPath"].Value.ToString();
            string remoteFTPDirectory = Dts.Variables["$Package::FTP_CCPL_InputFolder"].Value.ToString();
            int PortNumber = Convert.ToInt16(Dts.Variables["$Package::FTP_CCPL_ServerPort"].Value.ToString());

            TimeSpan span = new TimeSpan(0, 0, 2, 0, 0);

            //ArrayList directoryLists = new ArrayList();

            string DownloadDirectory = Dts.Variables["DownloadDirectory"].Value.ToString();

            SessionOptions sessionOptions = new SessionOptions
            {
                Protocol = Protocol.Ftp,
                HostName = ftpSite,
                UserName = username,
                Password = password,
                //SshHostKeyFingerprint = sshKey
                FtpMode = FtpMode.Passive,
                Timeout = span,
                TimeoutInMilliseconds = 120000,
            };

            try
            {
                using (Session session = new Session())
                {
                    // WinSCP .NET assembly must be in GAC to be used with SSIS,
                    // set path to WinSCP.exe explicitly, if using non-default path.
                    session.ExecutablePath = winscpPath;


                    if (winSCPLog)
                    {
                        session.SessionLogPath = @winSCPLogPath + @"WinscpSessionLogDL.txt";
                        session.DebugLogPath = @winSCPLogPath + @"WinscpDebugLogDL.txt";
                    }

                    // Connect
                    //session.Timeout = new TimeSpan(0, 2, 0); // two minutes
                    session.Timeout = span;
                    session.Open(sessionOptions);

                    //-----------Getting All Directory Structure from the Root Directory in FTP Server

       

                    string localFilePath =  RemotePath.TranslateRemotePathToLocal(DownloadDirectory, remoteFTPDirectory, localPath);



                    // Create local subdirectory, if it does not exist yet
                    if (!Directory.Exists(localFilePath))
                    {
                        Directory.CreateDirectory(localFilePath);
                    }

                    string remoteFilePath = RemotePath.EscapeFileMask(DownloadDirectory);



                    //TransferOperationResult transferResult =
                    //    session.GetFiles(remoteFilePath, localFilePath);

                    //// Did the download succeeded?
                    //if (!transferResult.IsSuccess)
                    //{
                    //    // Print error (but continue with other files)
                    //    Console.WriteLine(
                    //        "Error downloading file {0}: {1}",
                    //        fileInfo.FullName, transferResult.Failures[0].Message);
                    //}


                    ////-------------------------End Getting Root Directory                                                   

                    TransferOptions transferOptions = new TransferOptions();
                    transferOptions.TransferMode = TransferMode.Binary;

                    try
                    {
                        //session.GetFiles(remoteFTPDirectory + "/" + fileToDownload, localPath, false, transferOptions);
                        //session.GetFiles(remoteFTPDirectory , localPath, false, transferOptions);
                        session.GetFiles(DownloadDirectory, @localPath);

                    }
                    catch (Exception e)
                    {
                        Dts.Events.FireError(0, null,
                        string.Format("Error when using WinSCP to download file: {0}", e), null, 0);
                        Dts.TaskResult = (int)DTSExecResult.Failure;
                    }
                }
            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, null,
                string.Format("Error when using WinSCP to download file: {0}", e), null, 0);
                Dts.TaskResult = (int)DTSExecResult.Failure;
            }
            Dts.TaskResult = (int)ScriptResults.Success;


            //MessageBox.Show(Dts.Variables["DownloadDirectory"].Value.ToString());


			Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_69a47c5b52644e2694f0c183176727c7</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_69a47c5b52644e2694f0c183176727c7</msb:DisplayName>
    <msb:ProjectId>{32237724-D4B8-481E-951F-F2174279C44D}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_abac516154624acca29877030ed726cc.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_69a47c5b52644e2694f0c183176727c7")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_69a47c5b52644e2694f0c183176727c7")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="ST_abac516154624acca29877030ed726cc.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{A18EB7F4-A4F3-4F83-B8A7-172E3E57EFC0}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_69a47c5b52644e2694f0c183176727c7</RootNamespace><AssemblyName>ST_abac516154624acca29877030ed726cc</AssemblyName><TargetFrameworkVersion>v4.5</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch><TargetFrameworkProfile></TargetFrameworkProfile></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="WinSCPnet, Version=1.6.5.10071, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf, processorArchitecture=MSIL"><SpecificVersion>False</SpecificVersion><HintPath>C:\Program Files (x86)\WinSCP\WinSCPnet.dll</HintPath></Reference></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST140</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69a47c5b52644e2694f0c183176727c7.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69a47c5b52644e2694f0c183176727c7.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_69a47c5b52644e2694f0c183176727c7.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_69a47c5b52644e2694f0c183176727c7.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_69a47c5b52644e2694f0c183176727c7.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_69a47c5b52644e2694f0c183176727c7.dll">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
gQOiBAYAJAeiBA4AkARAAA4AmABAAA4AmwNAAAYASwc2AAYANwU2AA4AkgZAAA4ApABAAA4ADAdA
AAoAWQX4AwYAugCiBAYAJAGiBAYAxgCiBAYAPAcPBQAAAAAtAAAAAAABAAEAAQAQANIECQA5AAEA
AQAAABAA2AU0BlUAAQADAAABEAB6BjQGaQADAAcAAwEAALIGAABNAAQACgARAK4E+QARAEkB/QAR
AIQAAQEGBmYABQFWgKIGCAFWgCkBCAFQIAAAAACGANgEBgABADAjAAAAAIYYdwUGAAEAOCMAAAAA
gxh3BQYAAQBAIwAAAACTCEUFDAEBAGwjAAAAAJMIMQERAQEAcyMAAAAAkwg9ARYBAQB7IwAAAACW
CPEGHAECAIIjAAAAAIYYdwUGAAIAiiMAAAAAkRh9BSEBAgAAAAEAXwMJAHcFAQARAHcFBgAZAHcF
CgApAHcFEAAxAHcFEAA5AHcFEABBAHcFEABJAHcFEABRAHcFEABZAHcFEABhAHcFEABpAHcFBgCh
AHcFBgDJAHcFFQDZAHcFBgBxAKoGMgDhAGMGNwDpAJkEPADxAE0DQgDxAEMDQgCpAH8DRgABAboE
SgABAQEATwB5AHcFVACBAHcFBgCBAIwEXQCBAPcAEACBAOoAEACBAHcAEACBAJQAZACBACwHawCB
AJcFAQCJAHcFBgCJAIgDEAD5ANIGcQCJALcDEACJAKYDEACJACwHawCJAM0EdwAZASEEfQAhAcsG
hAAhAUUHiQAZAcoDkAAxAXcFBgAxAaAAlQCJAHEGnADhAMAGqAD5ANkGrgBJAW0FtADhAP0GAQBR
AY0BBgBxAHcFBgCpAHcFBgBZAdgAvQBZATgHxgCxAHcFzADRAHcFBgAIABQA7wAIABgA9AApAHMA
XAEuAAsANAEuABMAPQEuABsAXAEuACMAZQEuACsAjgEuADMAjgEuADsAjgEuAEMAZQEuAEsAlAEu
AFMAjgEuAFsAqwFDAGMA9ABJAHMAXAFhAHsA9ABjAGsA9AAbAAMAAQAEAAMAAABJBSUBAABRASoB
AAD1Bi8BAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcABIAAAAEAAACRHEOBAAAAAAAACQAAAAQAAAAA
AAAAAAAAANQAbgAAAAAADgAAAAAAAAAAAAAA3QDZAwAAAAABAAYABQBXJwAAAADmAOcGAAAAAAQA
AAAAAAAAAAAAANQAogQAAAAADgAAAAAAAAAAAAAA3QBHAAAAAAAAAAAAAQAAAOIFAAAFAAIAAAAA
VG9JbnQxNgBTVF82OWE0N2M1YjUyNjQ0ZTI2OTRmMGMxODMxNzY3MjdjNwA8TW9kdWxlPgBTeXN0
ZW0uSU8AV2luU0NQAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAG1zY29y
bGliAHNldF9QYXNzd29yZABkZWZhdWx0SW5zdGFuY2UAc2V0X0Z0cE1vZGUAc2V0X1RyYW5zZmVy
TW9kZQBWYXJpYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhh
bmRsZQBzZXRfVXNlck5hbWUAc2V0X0hvc3ROYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1
bnRpbWUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVy
ZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UARGlz
cG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1
Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3Nh
YmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRy
aWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJp
YnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNB
dHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmli
dXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRy
aWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAEdldFNlbnNpdGl2
ZVZhbHVlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAc2V0X0V4ZWN1
dGFibGVQYXRoAFJlbW90ZVBhdGgAc2V0X0RlYnVnTG9nUGF0aABzZXRfU2Vzc2lvbkxvZ1BhdGgA
RXNjYXBlRmlsZU1hc2sATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVHJhbnNsYXRlUmVtb3RlUGF0aFRvTG9jYWwA
U2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUXzY5YTQ3YzViNTI2NDRl
MjY5NGYwYzE4MzE3NjcyN2M3LmRsbABzZXRfUHJvdG9jb2wAZ2V0X0l0ZW0AU3lzdGVtAEVudW0A
cmVzb3VyY2VNYW4AVG9Cb29sZWFuAFRpbWVTcGFuAE9wZW4AU2NyaXB0TWFpbgBTZXNzaW9uAFN5
c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9u
AEV4Y2VwdGlvbgBDdWx0dXJlSW5mbwBEaXJlY3RvcnlJbmZvAGdldF9SZXNvdXJjZU1hbmFnZXIA
RXZlbnRzT2JqZWN0V3JhcHBlcgBGaXJlRXJyb3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9z
dGljcwBzZXRfVGltZW91dEluTWlsbGlzZWNvbmRzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vy
dmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF82OWE0N2M1YjUyNjQ0ZTI2OTRmMGMxODMxNzY3Mjdj
Ny5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfNjlhNDdj
NWI1MjY0NGUyNjk0ZjBjMTgzMTc2NzI3YzcuUHJvcGVydGllcwBnZXRfVmFyaWFibGVzAEdldEZp
bGVzAFNldHRpbmdzAFNlc3Npb25PcHRpb25zAFRyYW5zZmVyT3B0aW9ucwBTdWNjZXNzAGdldF9E
dHMAU2NyaXB0UmVzdWx0cwBnZXRfRXZlbnRzAEV4aXN0cwBDb25jYXQARm9ybWF0AE9iamVjdABX
aW5TQ1BuZXQAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQAVHJhbnNmZXJPcGVyYXRpb25SZXN1
bHQAQ29udmVydABzZXRfVGltZW91dABnZXRfQXNzZW1ibHkAQ3JlYXRlRGlyZWN0b3J5AAAAAAAp
JABQAGEAYwBrAGEAZwBlADoAOgB3AGkAbgBTAEMAUABQAGEAdABoAABDJABQAGEAYwBrAGEAZwBl
ADoAOgBGAFQAUABfAEMAQwBQAEwAXwBTAGUAcgB2AGUAcgBVAHMAZQByAE4AYQBtAGUAAEMkAFAA
YQBjAGsAYQBnAGUAOgA6AEYAVABQAF8AQwBDAFAATABfAFMAZQByAHYAZQByAFAAYQBzAHMAdwBv
AHIAZAAAOyQAUABhAGMAawBhAGcAZQA6ADoARgBUAFAAXwBDAEMAUABMAF8AUwBlAHIAdgBlAHIA
TgBhAG0AZQAASSQAUABhAGMAawBhAGcAZQA6ADoARgBUAFAAXwBDAEMAUABMAF8ARABvAHcAbgBs
AG8AYQBkAEQAaQByAGUAYwB0AG8AcgB5AAAnJABQAGEAYwBrAGEAZwBlADoAOgB3AGkAbgBTAEMA
UABMAG8AZwAALyQAUABhAGMAawBhAGcAZQA6ADoAdwBpAG4AUwBDAFAATABvAGcAUABhAHQAaAAA
PSQAUABhAGMAawBhAGcAZQA6ADoARgBUAFAAXwBDAEMAUABMAF8ASQBuAHAAdQB0AEYAbwBsAGQA
ZQByAAA7JABQAGEAYwBrAGEAZwBlADoAOgBGAFQAUABfAEMAQwBQAEwAXwBTAGUAcgB2AGUAcgBQ
AG8AcgB0AAAjRABvAHcAbgBsAG8AYQBkAEQAaQByAGUAYwB0AG8AcgB5AAAtVwBpAG4AcwBjAHAA
UwBlAHMAcwBpAG8AbgBMAG8AZwBEAEwALgB0AHgAdAAAKVcAaQBuAHMAYwBwAEQAZQBiAHUAZwBM
AG8AZwBEAEwALgB0AHgAdAAAW0UAcgByAG8AcgAgAHcAaABlAG4AIAB1AHMAaQBuAGcAIABXAGkA
bgBTAEMAUAAgAHQAbwAgAGQAbwB3AG4AbABvAGEAZAAgAGYAaQBsAGUAOgAgAHsAMAB9AABxUwBU
AF8ANgA5AGEANAA3AGMANQBiADUAMgA2ADQANABlADIANgA5ADQAZgAwAGMAMQA4ADMAMQA3ADYA
NwAyADcAYwA3AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAAABh
6CetpIs9Rb72aN2zBh6eAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFhFgcPDg4ODg4CDg4RPQ4S
QRJFDhJJEkkEIAAScQQgABJ1BSABEnkcAyAAHAMgAA4EAAECHAQAAQYOCCAFAQgICAgIBiABARGA
hQYgAQERgIkFIAEBET0FAAIODg4FIAEBEkEGAAMODg4OBAABAg4GAAESgJUOBAABDg4GIAEBEYCd
CyAEEoChDg4CEoCZBSAAEoClBQACDg4cCCAFAggODg4ICAABEoCtEYCxBSAAEoC1ByACAQ4SgLUI
t3pcVhk04IkIiYRdzYCAzJEIInHsSjxW0L8EAAAAAAQBAAAAAwYSWQMGEl0DBhIQAgYIAwYRFAQA
ABJZBAAAEl0FAAEBEl0EAAASEAMAAAEECAASWQQIABJdBAgAEhAIAQAIAAAAAAAeAQABAFQCFldy
YXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzY5YTQ3YzViNTI2NDRlMjY5NGYw
YzE4MzE3NjcyN2M3AAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjAAAEkBABouTkVURnJhbWV3
b3JrLFZlcnNpb249djQuNQEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsg
NC41AAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBt
c2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2Vu
PWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAA
AAAAAAAAAABQQURQQURQtAAAAIA2AAAAAAAAAAAAAJo2AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAA
AACMNgAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgA
AABYQAAAGgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAA
AL0E7/4AAAEAAAABAEOBkRwAAAEAQ4GRHD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAA
AQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAA
AAAAAACwBHoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAA
MAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5
AE4AYQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAA
UwBUAF8ANgA5AGEANAA3AGMANQBiADUAMgA2ADQANABlADIANgA5ADQAZgAwAGMAMQA4ADMAMQA3
ADYANwAyADcAYwA3AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcA
MwAxADMALgAzADMAMAA5ADEAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBU
AF8ANgA5AGEANAA3AGMANQBiADUAMgA2ADQANABlADIANgA5ADQAZgAwAGMAMQA4ADMAMQA3ADYA
NwAyADcAYwA3AC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABD
AG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAyADAAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEA
ZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBt
AGUAAABTAFQAXwA2ADkAYQA0ADcAYwA1AGIANQAyADYANAA0AGUAMgA2ADkANABmADAAYwAxADgA
MwAxADcANgA3ADIANwBjADcALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAA
AAAAUwBUAF8ANgA5AGEANAA3AGMANQBiADUAMgA2ADQANABlADIANgA5ADQAZgAwAGMAMQA4ADMA
MQA3ADYANwAyADcAYwA3AAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAu
ADAALgA3ADMAMQAzAC4AMwAzADAAOQAxAAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUA
cgBzAGkAbwBuAAAAMQAuADAALgA3ADMAMQAzAC4AMwAzADAAOQAxAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAKw2AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\GetAllCustomersfromDB"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{DDEE5482-838D-4CE0-B31E-9100CC5D10F7}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="GetAllCustomersfromDB"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{460708B4-0056-4954-98AA-8146CEBC02BA}"
          SQLTask:SqlStatementSource="SELECT Cust_Code, Cust_ShortCode, InputFolder&#xA;FROM     IE_Customers"
          SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::CustomerLists" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\GettAllDirectoryListsfromFTP"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{18B77C9D-23B8-4E28-B88A-703D0D08167D}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="GettAllDirectoryListsfromFTP"
      DTS:ThreadHint="2">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_26e9aff19e7142ce9b560428797f90ad"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="$Package::FTP_CCPL_DownloadDirectory,$Package::FTP_CCPL_InputFolder,$Package::FTP_CCPL_ServerName,$Package::FTP_CCPL_ServerPassword,$Package::FTP_CCPL_ServerPort,$Package::FTP_CCPL_ServerUserName,$Package::winSCPLog,$Package::winSCPLogPath,$Package::winSCPPath"
          ReadWriteVariables="User::DownloadDirectories,User::FtpWorkingDirectory">
          <ProjectItem
            Name="ST_26e9aff19e7142ce9b560428797f90ad.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{8BC11886-A114-49D9-B4C7-A072889DF24F}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_26e9aff19e7142ce9b560428797f90ad</RootNamespace>
    <AssemblyName>ST_26e9aff19e7142ce9b560428797f90ad</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="WinSCPnet, Version=1.6.5.10071, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\WinSCP\WinSCPnet.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using WinSCP;
using System.Collections.Generic;
using System.Collections;
#endregion

namespace ST_26e9aff19e7142ce9b560428797f90ad
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
           
            String winscpPath = (string)Dts.Variables["$Package::winSCPPath"].GetSensitiveValue();
            string username = (string)Dts.Variables["$Package::FTP_CCPL_ServerUserName"].GetSensitiveValue();
            string password = (string)Dts.Variables["$Package::FTP_CCPL_ServerPassword"].GetSensitiveValue();
            string ftpSite = (string)Dts.Variables["$Package::FTP_CCPL_ServerName"].Value;
            string localPath = Dts.Variables["$Package::FTP_CCPL_DownloadDirectory"].Value.ToString();
            //string sshKey = Dts.Variables["sshKey"].Value.ToString();
            Boolean winSCPLog = Convert.ToBoolean(Dts.Variables["$Package::winSCPLog"].Value);
            string winSCPLogPath = Dts.Variables["$Package::winSCPLogPath"].Value.ToString();
            string remoteFTPDirectory = Dts.Variables["$Package::FTP_CCPL_InputFolder"].Value.ToString();
            int PortNumber = Convert.ToInt16(Dts.Variables["$Package::FTP_CCPL_ServerPort"].Value.ToString());

            TimeSpan span = new TimeSpan(0, 0, 2, 0, 0);

            ArrayList directoryLists = new ArrayList(); 

            SessionOptions sessionOptions = new SessionOptions
            {
                Protocol = Protocol.Ftp,
                HostName = ftpSite,
                UserName = username,
                Password = password,
                //SshHostKeyFingerprint = sshKey
                FtpMode = FtpMode.Passive,
                Timeout = span,
                TimeoutInMilliseconds = 120000,
            };

            try
            {
                using (Session session = new Session())
                {
                    // WinSCP .NET assembly must be in GAC to be used with SSIS,
                    // set path to WinSCP.exe explicitly, if using non-default path.
                    session.ExecutablePath = winscpPath;


                    if (winSCPLog)
                    {
                        session.SessionLogPath = @winSCPLogPath + @"WinscpSessionLog.txt";
                        session.DebugLogPath = @winSCPLogPath + @"WinscpDebugLog.txt";
                    }

                    // Connect
                    //session.Timeout = new TimeSpan(0, 2, 0); // two minutes
                    session.Timeout = span;
                    session.Open(sessionOptions);

                    //-----------Getting All Directory Structure from the Root Directory in FTP Server

                    // Enumerate files and directories to download
                    IEnumerable<RemoteFileInfo> fileInfos =
                        session.EnumerateRemoteFiles(
                            remoteFTPDirectory, null,
                            EnumerationOptions.EnumerateDirectories |
                                EnumerationOptions.AllDirectories);

                    foreach (RemoteFileInfo fileInfo in fileInfos)
                    {
                        string localFilePath =
                            RemotePath.TranslateRemotePathToLocal(
                                fileInfo.FullName, remoteFTPDirectory, localPath);

                        if (fileInfo.IsDirectory)
                        {
                            //// Create local subdirectory, if it does not exist yet
                            //if (!Directory.Exists(localFilePath))
                            //{
                            //    Directory.CreateDirectory(localFilePath);
                            //}


                            ///MessageBox.Show("fullname = "+fileInfo.FullName);
                                                        
                            directoryLists.Add (fileInfo.FullName.ToString());
                        }
                        else
                        {
                            Console.WriteLine("Downloading file {0}...", fileInfo.FullName);
                            // Download file
                            string remoteFilePath = RemotePath.EscapeFileMask(fileInfo.FullName);

                            if (fileInfo.IsDirectory)
                            { 
                                MessageBox.Show("remoteFilePath=" + remoteFilePath);
                            }

                            //TransferOperationResult transferResult =
                            //    session.GetFiles(remoteFilePath, localFilePath);

                            //// Did the download succeeded?
                            //if (!transferResult.IsSuccess)
                            //{
                            //    // Print error (but continue with other files)
                            //    Console.WriteLine(
                            //        "Error downloading file {0}: {1}",
                            //        fileInfo.FullName, transferResult.Failures[0].Message);
                            //}
                        }
                    }
                    ////-------------------------End Getting Root Directory


                    Dts.Variables["DownloadDirectories"].Value = directoryLists;//fileInfo.FullName;



                    ////TransferOptions transferOptions = new TransferOptions();
                    ////transferOptions.TransferMode = TransferMode.Binary;

                    ////try
                    ////{
                    ////    //session.GetFiles(remoteFTPDirectory + "/" + fileToDownload, localPath, false, transferOptions);
                    ////    //session.GetFiles(remoteFTPDirectory , localPath, false, transferOptions);
                    ////    session.GetFiles(remoteFTPDirectory, @localPath);

                    ////}
                    ////catch (Exception e)
                    ////{
                    ////    Dts.Events.FireError(0, null,
                    ////    string.Format("Error when using WinSCP to download file: {0}", e), null, 0);
                    ////    Dts.TaskResult = (int)DTSExecResult.Failure;
                    ////}
                }
            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, null,
                string.Format("Error when using WinSCP to download file: {0}", e), null, 0);
                Dts.TaskResult = (int)DTSExecResult.Failure;
            }
            Dts.TaskResult = (int)ScriptResults.Success;



        }

   

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_26e9aff19e7142ce9b560428797f90ad</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_26e9aff19e7142ce9b560428797f90ad</msb:DisplayName>
    <msb:ProjectId>{79D1F5DD-8DBE-4CF7-929D-3279C9D32806}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_26e9aff19e7142ce9b560428797f90ad.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_26e9aff19e7142ce9b560428797f90ad.Properties.Settings.get_Default():ST_26e9aff19e7142ce9b560428797f90ad.Properties.Sett" +
    "ings")]

namespace ST_26e9aff19e7142ce9b560428797f90ad.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_26e9aff19e7142ce9b560428797f90ad")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_26e9aff19e7142ce9b560428797f90ad")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_26e9aff19e7142ce9b560428797f90ad.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_26e9aff19e7142ce9b560428797f90ad.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_26e9aff19e7142ce9b560428797f90ad.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_26e9aff19e7142ce9b560428797f90ad.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_26e9aff19e7142ce9b560428797f90ad.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_26e9aff19e7142ce9b560428797f90ad.dll">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
DwBlAA4AdAUuAAYAagXrBAYA8gTrBAYABALoBQYAdAfrBAYAkwU1BgYAgwVDBRIA1AGXBBIANQKX
BBIAtAEuBQYA6QEVBgoAhQRBBBYAywY5ARYA0QA5AQYAygPrBAYAuQfrBA4A2QQuAA4AyQAuAAYA
AQBlAA4AKgcuAA4A5AMuAAYACgHrBBoA5QfzBhoAkQfzBgYAwQUIBwYA2gDrBAoAowVBBAYAYwHr
BAYA5gDrBAYA9AdYBQAAAAAlAAAAAAABAAEAAQAQABsFgAA5AAEAAQAAABAAPAaYBmEAAQADAAAB
EADqBpgGdQADAAcAAwEAAE0HAABZAAQACgARAPcEKgERAIgBLgERALUAMgEGBlQANgFWgD0HOQFW
gGgBOQFQIAAAAACGACEFBgABAHQjAAAAAIYY2wUGAAEAfCMAAAAAgxjbBQYAAQCEIwAAAACTCI8F
PQEBALAjAAAAAJMIcAFCAQEAtyMAAAAAkwh8AUcBAQC/IwAAAACWCIUHTQECAMYjAAAAAIYY2wUG
AAIAziMAAAAAkRjhBVIBAgAAAAEAqAMJANsFAQARANsFBgAZANsFCgApANsFEAAxANsFEAA5ANsF
EABBANsFEABJANsFEABRANsFEABZANsFEABhANsFEABpANsFBgC5ANsFBgDhANsFFQDxANsFBgBx
AEUHOQD5AMcGPgABAeIERAAJAZYDSwAJAYIDSwDBAMgDTwAZAQMFUwAZAR0AWAB5ANsFXQCBANsF
BgCJANsFBgCJANUEZgCJACwBEACJAB8BEACJAKgAEACJAMUAbQCJAMsHdACJAPsFAQCRANsFBgCR
ANEDEAARAWYHegCRAAAEEACRAO8DEACRAMsHdACRABYFgACRANUGhgAMAM0FnQAUAK0HrQChABIB
TwBBAWoEsgChAP0HuQCBAKQAvQBJAVkBwgBBARMEyABRAeAHzQBhAdcHuQBpAcwBBgAJAYwD1AD5
AFsH2QARAW0H3wBxAbcF5QD5AJ4HAQBxANsFBgDBANsFBgB5AfgA7gB5AfAH9wDJANsF/QDpANsF
BgAIABQAIAEIABgAJQEpAHMAjQEuAAsAZQEuABMAbgEuABsAjQEuACMAlgEuACsAvwEuADMAvwEu
ADsAvwEuAEMAlgEuAEsAxQEuAFMAvwEuAFsA3AFDAGMAJQFJAHMAjQFhAHsAJQFjAGsAJQEbAAMA
AQAEAAMAAACTBVYBAACQAVsBAACJB2ABAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcAlQCmAASAAAAB
AAAAkRxTfgAAAAAAAIAAAAAEAAAAAAAAAAAAAAAFAVwAAAAAAA4AAAAAAAAAAAAAAA4BIgQAAAAA
AQAGAAUAVycAAAAAFwF7BwAAAAAEAAAAAAAAAAAAAAAFAesEAAAAAA4AAAAAAAAAAAAAAA4BNQAA
AAAABAAAAAAAAAAAAAAABQHzBgAAAAAAAAAAAQAAAEYGAAAFAAIAAAAASUVudW1lcmFibGVgMQBJ
RW51bWVyYXRvcmAxAFRvSW50MTYAPE1vZHVsZT4AV2luU0NQAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
TWFuYWdlZERUUwB2YWx1ZV9fAG1zY29ybGliAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAFNU
XzI2ZTlhZmYxOWU3MTQyY2U5YjU2MDQyODc5N2Y5MGFkAEFkZABzZXRfUGFzc3dvcmQAZGVmYXVs
dEluc3RhbmNlAHNldF9GdHBNb2RlAFZhcmlhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFu
ZGxlAEdldFR5cGVGcm9tSGFuZGxlAENvbnNvbGUAZ2V0X0Z1bGxOYW1lAHNldF9Vc2VyTmFtZQBz
ZXRfSG9zdE5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBXcml0ZUxpbmUAVHlw
ZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRT
Y3JpcHRPYmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UARGlzcG9zZQBFZGl0
b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVz
ZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmli
dXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFy
Z2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3Nl
bWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUA
QXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNT
Y3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVu
dGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAHNldF9WYWx1ZQBHZXRTZW5zaXRp
dmVWYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvU3RyaW5nAHNldF9FeGVj
dXRhYmxlUGF0aABSZW1vdGVQYXRoAHNldF9EZWJ1Z0xvZ1BhdGgAc2V0X1Nlc3Npb25Mb2dQYXRo
AEVzY2FwZUZpbGVNYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQu
U3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFRyYW5zbGF0ZVJlbW90ZVBhdGhUb0xvY2Fs
AFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF8yNmU5YWZmMTllNzE0
MmNlOWI1NjA0Mjg3OTdmOTBhZC5kbGwAc2V0X1Byb3RvY29sAGdldF9JdGVtAFN5c3RlbQBFbnVt
AHJlc291cmNlTWFuAFRvQm9vbGVhbgBUaW1lU3BhbgBPcGVuAFNjcmlwdE1haW4AU2Vzc2lvbgBT
eXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlv
bgBFeGNlcHRpb24AUmVtb3RlRmlsZUluZm8AQ3VsdHVyZUluZm8AZ2V0X1Jlc291cmNlTWFuYWdl
cgBFdmVudHNPYmplY3RXcmFwcGVyAEZpcmVFcnJvcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9y
AC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAc2V0X1RpbWVvdXRJbk1pbGxpc2Vjb25k
cwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfMjZl
OWFmZjE5ZTcxNDJjZTliNTYwNDI4Nzk3ZjkwYWQuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3Vy
Y2VzAERlYnVnZ2luZ01vZGVzAFNUXzI2ZTlhZmYxOWU3MTQyY2U5YjU2MDQyODc5N2Y5MGFkLlBy
b3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBFbnVtZXJhdGVSZW1vdGVGaWxlcwBTZXR0aW5ncwBTeXN0
ZW0uV2luZG93cy5Gb3JtcwBTeXN0ZW0uQ29sbGVjdGlvbnMAU2Vzc2lvbk9wdGlvbnMARW51bWVy
YXRpb25PcHRpb25zAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAGdldF9FdmVudHMAQ29u
Y2F0AEZvcm1hdABPYmplY3QAV2luU0NQbmV0AGdldF9EZWZhdWx0AERpYWxvZ1Jlc3VsdABzZXRf
VGFza1Jlc3VsdABnZXRfQ3VycmVudABDb252ZXJ0AEFycmF5TGlzdABzZXRfVGltZW91dABNb3Zl
TmV4dABTaG93AE1lc3NhZ2VCb3gAZ2V0X0Fzc2VtYmx5AGdldF9Jc0RpcmVjdG9yeQAAAAAAKSQA
UABhAGMAawBhAGcAZQA6ADoAdwBpAG4AUwBDAFAAUABhAHQAaAAAQyQAUABhAGMAawBhAGcAZQA6
ADoARgBUAFAAXwBDAEMAUABMAF8AUwBlAHIAdgBlAHIAVQBzAGUAcgBOAGEAbQBlAABDJABQAGEA
YwBrAGEAZwBlADoAOgBGAFQAUABfAEMAQwBQAEwAXwBTAGUAcgB2AGUAcgBQAGEAcwBzAHcAbwBy
AGQAADskAFAAYQBjAGsAYQBnAGUAOgA6AEYAVABQAF8AQwBDAFAATABfAFMAZQByAHYAZQByAE4A
YQBtAGUAAEkkAFAAYQBjAGsAYQBnAGUAOgA6AEYAVABQAF8AQwBDAFAATABfAEQAbwB3AG4AbABv
AGEAZABEAGkAcgBlAGMAdABvAHIAeQAAJyQAUABhAGMAawBhAGcAZQA6ADoAdwBpAG4AUwBDAFAA
TABvAGcAAC8kAFAAYQBjAGsAYQBnAGUAOgA6AHcAaQBuAFMAQwBQAEwAbwBnAFAAYQB0AGgAAD0k
AFAAYQBjAGsAYQBnAGUAOgA6AEYAVABQAF8AQwBDAFAATABfAEkAbgBwAHUAdABGAG8AbABkAGUA
cgAAOyQAUABhAGMAawBhAGcAZQA6ADoARgBUAFAAXwBDAEMAUABMAF8AUwBlAHIAdgBlAHIAUABv
AHIAdAAAKVcAaQBuAHMAYwBwAFMAZQBzAHMAaQBvAG4ATABvAGcALgB0AHgAdAAAJVcAaQBuAHMA
YwBwAEQAZQBiAHUAZwBMAG8AZwAuAHQAeAB0AAAvRABvAHcAbgBsAG8AYQBkAGkAbgBnACAAZgBp
AGwAZQAgAHsAMAB9AC4ALgAuAAAfcgBlAG0AbwB0AGUARgBpAGwAZQBQAGEAdABoAD0AACdEAG8A
dwBuAGwAbwBhAGQARABpAHIAZQBjAHQAbwByAGkAZQBzAABbRQByAHIAbwByACAAdwBoAGUAbgAg
AHUAcwBpAG4AZwAgAFcAaQBuAFMAQwBQACAAdABvACAAZABvAHcAbgBsAG8AYQBkACAAZgBpAGwA
ZQA6ACAAewAwAH0AAHFTAFQAXwAyADYAZQA5AGEAZgBmADEAOQBlADcAMQA0ADIAYwBlADkAYgA1
ADYAMAA0ADIAOAA3ADkANwBmADkAMABhAGQALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMA
bwB1AHIAYwBlAHMAAAAAAB2ymenMYgJFqF/xWAEq0kcABCABAQgDIAABBSABARERBCABAQ4FIAEB
EW0dBxAODg4ODgIODhE9EkESRRJJFRJNARJRElEOElUEIAASfQUgABKAgQYgARKAhRwDIAAcAyAA
DgQAAQIcBAABBg4IIAUBCAgICAgGIAEBEYCRBiABARGAlQUgAQERPQUAAg4ODgUgAQESRQ4gAxUS
gJkBElEODhGAnQcVEoCZARJRCCAAFRJNARMABhUSTQESUQQgABMABgADDg4ODgMgAAIEIAEIHAUA
AgEOHAQAAQ4OBgABEYCtDgQgAQEcBSAAEoC5BQACDg4cCCAFAggODg4ICAABEoC9EYDBBSAAEoDF
ByACAQ4SgMUIt3pcVhk04IkIiYRdzYCAzJEIInHsSjxW0L8EAAAAAAQBAAAAAwYSZQMGEmkDBhIQ
AgYIAwYRFAQAABJlBAAAEmkFAAEBEmkEAAASEAMAAAEECAASZQQIABJpBAgAEhAIAQAIAAAAAAAe
AQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzI2ZTlhZmYxOWU3
MTQyY2U5YjU2MDQyODc5N2Y5MGFkAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjAAAEkBABou
TkVURnJhbWV3b3JrLFZlcnNpb249djQuNQEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBG
cmFtZXdvcmsgNC41AAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VS
ZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGlj
S2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJj
ZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAUDgAAAAAAAAAAAAAajgAAAAgAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAFw4AAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAA
EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAA
AFhAAAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAA
vQTv/gAAAQAAAAEAU36RHAAAAQBTfpEcPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAAB
AFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAA
AAAAALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAw
ADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkA
TgBhAG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABT
AFQAXwAyADYAZQA5AGEAZgBmADEAOQBlADcAMQA0ADIAYwBlADkAYgA1ADYAMAA0ADIAOAA3ADkA
NwBmADkAMABhAGQAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwAz
ADEAMwAuADMAMgAzADMAOQAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQA
XwAyADYAZQA5AGEAZgBmADEAOQBlADcAMQA0ADIAYwBlADkAYgA1ADYAMAA0ADIAOAA3ADkANwBm
ADkAMABhAGQALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMA
bwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIAMAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBk
AGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0A
ZQAAAFMAVABfADIANgBlADkAYQBmAGYAMQA5AGUANwAxADQAMgBjAGUAOQBiADUANgAwADQAMgA4
ADcAOQA3AGYAOQAwAGEAZAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAA
AABTAFQAXwAyADYAZQA5AGEAZgBmADEAOQBlADcAMQA0ADIAYwBlADkAYgA1ADYAMAA0ADIAOAA3
ADkANwBmADkAMABhAGQAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADcAMwAxADMALgAzADIAMwAzADkAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQBy
AHMAaQBvAG4AAAAxAC4AMAAuADcAMwAxADMALgAzADIAMwAzADkAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAfDgAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\LoopAllCustomers"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{A92DA3FC-EA05-40DD-8C4D-A08100FB1288}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="LoopAllCustomers">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{E5167D82-71E7-463E-82E6-81C8E05C1989}"
        DTS:ObjectName="{E5167D82-71E7-463E-82E6-81C8E05C1989}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::CustomerLists" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\LoopAllCustomers\GettAllDirectoryListsfromFTPByCustomer"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{3fb98c76-c4e0-45eb-a359-c9c0064e229b}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="GettAllDirectoryListsfromFTPByCustomer"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_f245bd5fb4b547f5a4fe5dde38f1632c"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::CustomerLists,$Package::FTP_CCPL_DownloadDirectory,$Package::FTP_CCPL_InputFolder,$Package::FTP_CCPL_ServerName,$Package::FTP_CCPL_ServerPassword,$Package::FTP_CCPL_ServerPort,$Package::FTP_CCPL_ServerUserName,$Package::winSCPLog,$Package::winSCPLogPath,$Package::winSCPPath"
              ReadWriteVariables="User::CustInputFolder,User::CustomerID,User::CustSC,User::DownloadDirectories,User::FtpWorkingDirectory">
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_26e9aff19e7142ce9b560428797f90ad.Properties.Settings.get_Default():ST_26e9aff19e7142ce9b560428797f90ad.Properties.Sett" +
    "ings")]

namespace ST_26e9aff19e7142ce9b560428797f90ad.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using WinSCP;
using System.Collections.Generic;
using System.Collections;
using System.IO;
#endregion

namespace ST_26e9aff19e7142ce9b560428797f90ad
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        public object CustSC { get; private set; }
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
		{
           
            String winscpPath = (string)Dts.Variables["$Package::winSCPPath"].GetSensitiveValue();
            string username = (string)Dts.Variables["$Package::FTP_CCPL_ServerUserName"].GetSensitiveValue();
            string password = (string)Dts.Variables["$Package::FTP_CCPL_ServerPassword"].GetSensitiveValue();
            string ftpSite = (string)Dts.Variables["$Package::FTP_CCPL_ServerName"].Value;
            string localPath = Dts.Variables["$Package::FTP_CCPL_DownloadDirectory"].Value.ToString();
            //string sshKey = Dts.Variables["sshKey"].Value.ToString();
            Boolean winSCPLog = Convert.ToBoolean(Dts.Variables["$Package::winSCPLog"].Value);
            string winSCPLogPath = Dts.Variables["$Package::winSCPLogPath"].Value.ToString();
            string remoteFTPDirectory = Dts.Variables["$Package::FTP_CCPL_InputFolder"].Value.ToString();
            int PortNumber = Convert.ToInt16(Dts.Variables["$Package::FTP_CCPL_ServerPort"].Value.ToString());

            ///remoteFTPDirectory = Dts.Variables["CustSC"].Value.ToString();
            //MessageBox.Show(Dts.Variables["CustInputFolder"].Value.ToString());

            string custInputDirectory = Path.Combine(localPath,Dts.Variables["CustInputFolder"].Value.ToString());
            //localPath
           
           
            

            TimeSpan span = new TimeSpan(0, 0, 2, 0, 0);

            ArrayList directoryLists = new ArrayList(); 

            SessionOptions sessionOptions = new SessionOptions
            {
                Protocol = Protocol.Ftp,
                HostName = ftpSite,
                UserName = username,
                Password = password,
                //SshHostKeyFingerprint = sshKey
                FtpMode = FtpMode.Passive,
                Timeout = span,
                TimeoutInMilliseconds = 120000,
            };

            try
            {
                using (Session session = new Session())
                {
                    // WinSCP .NET assembly must be in GAC to be used with SSIS,
                    // set path to WinSCP.exe explicitly, if using non-default path.
                    session.ExecutablePath = winscpPath;


                    if (winSCPLog)
                    {
                        session.SessionLogPath = @winSCPLogPath + @"WinscpSessionLog.txt";
                        session.DebugLogPath = @winSCPLogPath + @"WinscpDebugLog.txt";
                    }

                    // Connect
                    //session.Timeout = new TimeSpan(0, 2, 0); // two minutes
                    session.Timeout = span;
                    session.Open(sessionOptions);

                    //-----------Getting All Directory Structure from the Root Directory in FTP Server

                    // Enumerate files and directories to download
                    IEnumerable<RemoteFileInfo> fileInfos =
                        session.EnumerateRemoteFiles(
                            remoteFTPDirectory, null,
                            EnumerationOptions.EnumerateDirectories |
                                EnumerationOptions.AllDirectories);
                    

                    foreach (RemoteFileInfo fileInfo in fileInfos)
                    {
                        string localFilePath =
                            RemotePath.TranslateRemotePathToLocal(
                                fileInfo.FullName, remoteFTPDirectory, custInputDirectory);

                        if (fileInfo.IsDirectory)
                        {
                            //// Create local subdirectory, if it does not exist yet
                            //if (!Directory.Exists(localFilePath))
                            //{
                            //    Directory.CreateDirectory(localFilePath);
                            //}


                            ///MessageBox.Show("fullname = "+fileInfo.FullName);
                                                        
                            directoryLists.Add (fileInfo.FullName.ToString());
                        }
                        else
                        {
                            Console.WriteLine("Downloading file {0}...", fileInfo.FullName);
                            // Download file
                            string remoteFilePath = RemotePath.EscapeFileMask(fileInfo.FullName);

                            if (fileInfo.IsDirectory)
                            { 
                                MessageBox.Show("remoteFilePath=" + remoteFilePath);
                            }

                            //TransferOperationResult transferResult =
                            //    session.GetFiles(remoteFilePath, localFilePath);

                            //// Did the download succeeded?
                            //if (!transferResult.IsSuccess)
                            //{
                            //    // Print error (but continue with other files)
                            //    Console.WriteLine(
                            //        "Error downloading file {0}: {1}",
                            //        fileInfo.FullName, transferResult.Failures[0].Message);
                            //}
                        }
                    }
                    ////-------------------------End Getting Root Directory


                    Dts.Variables["DownloadDirectories"].Value = directoryLists;//fileInfo.FullName;



                    ////TransferOptions transferOptions = new TransferOptions();
                    ////transferOptions.TransferMode = TransferMode.Binary;

                    ////try
                    ////{
                    ////    //session.GetFiles(remoteFTPDirectory + "/" + fileToDownload, localPath, false, transferOptions);
                    ////    //session.GetFiles(remoteFTPDirectory , localPath, false, transferOptions);
                    ////    session.GetFiles(remoteFTPDirectory, @localPath);

                    ////}
                    ////catch (Exception e)
                    ////{
                    ////    Dts.Events.FireError(0, null,
                    ////    string.Format("Error when using WinSCP to download file: {0}", e), null, 0);
                    ////    Dts.TaskResult = (int)DTSExecResult.Failure;
                    ////}
                }
            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, null,
                string.Format("Error when using WinSCP to download file: {0}", e), null, 0);
                Dts.TaskResult = (int)DTSExecResult.Failure;
            }
            Dts.TaskResult = (int)ScriptResults.Success;



        }

   

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="ST_f245bd5fb4b547f5a4fe5dde38f1632c.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{8BC11886-A114-49D9-B4C7-A072889DF24F}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_26e9aff19e7142ce9b560428797f90ad</RootNamespace>
    <AssemblyName>ST_f245bd5fb4b547f5a4fe5dde38f1632c</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="WinSCPnet, Version=1.6.5.10071, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\WinSCP\WinSCPnet.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_f245bd5fb4b547f5a4fe5dde38f1632c</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_f245bd5fb4b547f5a4fe5dde38f1632c</msb:DisplayName>
    <msb:ProjectId>{F947F891-78CE-4DD4-A0BD-581DCB4CD6AC}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_f245bd5fb4b547f5a4fe5dde38f1632c.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_26e9aff19e7142ce9b560428797f90ad")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_26e9aff19e7142ce9b560428797f90ad")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_26e9aff19e7142ce9b560428797f90ad.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_26e9aff19e7142ce9b560428797f90ad.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_26e9aff19e7142ce9b560428797f90ad.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_26e9aff19e7142ce9b560428797f90ad.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_26e9aff19e7142ce9b560428797f90ad.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_f245bd5fb4b547f5a4fe5dde38f1632c.dll">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
BgByA7wFBgDJArwFBgDkAhIECgCNA6UECgD8AaUEBgBNAnkGBgDYB08FBgBxBU8FBgAlCGwHDgB/
B04ADgCKBU4ABgAPAKkADgDYBU4ABgDOBU8FBgBWBU8FBgBoAkwGBgD3BZkGBgDnBacFEgA4AvsE
EgCZAvsEEgAYApIFCgDpBKUEFgAvB5UBFgAtAZUBBgAuBE8FBgAdCE8FBgByBEQADgA9BU4ADgAl
AU4ABgABAKkADgCOB04ADgBIBE4ABgBmAU8FGgBJCFcHGgD1B1cHBgAlBmwHBgA2AU8FCgAHBqUE
BgDHAU8FBgBCAU8FBgBYCLwFAAAAACUAAAAAAAEAAQABABAAfwXEADkAAQABAAAAEACgBvwGQQAC
AAUAAAEQAE4H/AZ5AAQACQADAQAAsQcAAGEABQAMAAEA7AAqAREAWwUtAREA7AExAREAEQE1AQYG
dAA5AVaAoQc8AVaAzAE8AVAgAAAAAIYILgBLAAEAWCAAAAAAgQg5ANQAAQBkIAAAAACGAIUFBgAC
AKwjAAAAAIYYPwYGAAIAtCMAAAAAgxg/BgYAAgC8IwAAAACTCPMFQAECAOgjAAAAAJMI1AFFAQIA
7yMAAAAAkwjgAUoBAgD3IwAAAACWCOkHUAEDAP4jAAAAAIYYPwYGAAMABiQAAAAAkRhFBlUBAwAA
AAEADAQAAAEADAQJAD8GAQARAD8GBgAZAD8GCgApAD8GEAAxAD8GEAA5AD8GEABBAD8GEABJAD8G
EABRAD8GEABZAD8GEABhAD8GEABpAD8GBgB5AD8GBgDJAD8GBgDpAD8GFQBxAKkHOQD5ACsHPgAB
AUYFRAAJAfoDSwAJAeYDSwCBACwETwAZAWcFUwAZAR0AWAAhAb8BXQCJAD8GYwCRAD8GBgCZAD8G
BgCZADkFbACZAIgBEACZAHsBEACZAAQBEACZACEBcwCZAC8IegCZAF8GAQChAD8GBgChADUEEAAR
AcoHXQChAGQEEAChAFMEEAChAC8IegChAHoFgAChADkHhgAMADEGnQAUABEIrQCxAG4BTwBJAc4E
sgCxAGEIuQCRAOgAvQBRAbUBwgBJAXcEyABZAUQIzQBpATsIuQBxATACBgAJAfAD1AD5AL8H2QAR
AdEH3wB5ARsG5QD5AAIIAQBxAD8GBgCBAD8GBgCBAVQB7gCBAVQI9wDRAD8G/QDxAD8GBgAIABgA
IAEIABwAJQEgAGsAJQEhAGsAJQEuAAsAbAEuABMAdQEuABsAlAEuACMAnQEuACsAxgEuADMAxgEu
ADsAxgEuAEMAnQEuAEsAzAEuAFMAxgEuAFsA4wFAAGsAJQFDAGMAJQFJAHsAlAFjAHMAJQFpAHsA
lAGBAGsAJQEbAAIAAQADAAIABAAEAAAAPQBZAQAA9wVdAQAA9AFiAQAA7QdnAQIAAQADAAEAAgAD
AAIABgAFAAIABwAHAAEACAAHAAIACQAJAJUApgAEgAAAAQAAAJQc73IAAAAAAACFAAAABAAAAAAA
AAAAAAAABQF8AAAAAAAOAAAAAAAAAAAAAAAOAYYEAAAAAAEABgAFAFcnAAAAABcB3wcAAAAABAAA
AAAAAAAAAAAABQFPBQAAAAAOAAAAAAAAAAAAAAAOAVUAAAAAAAQAAAAAAAAAAAAAAAUBVwcAAAAA
AAAAAAEAAACqBgAABQACAAAAAElFbnVtZXJhYmxlYDEASUVudW1lcmF0b3JgMQBUb0ludDE2ADxN
b2R1bGU+AGdldF9DdXN0U0MAc2V0X0N1c3RTQwBTeXN0ZW0uSU8AV2luU0NQAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAG1zY29ybGliAFNUX2YyNDViZDVmYjRiNTQ3ZjVh
NGZlNWRkZTM4ZjE2MzJjAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAFNUXzI2ZTlhZmYxOWU3
MTQyY2U5YjU2MDQyODc5N2Y5MGFkAEFkZAA8Q3VzdFNDPmtfX0JhY2tpbmdGaWVsZABzZXRfUGFz
c3dvcmQAZGVmYXVsdEluc3RhbmNlAHNldF9GdHBNb2RlAFZhcmlhYmxlAElEaXNwb3NhYmxlAFJ1
bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAENvbnNvbGUAZ2V0X0Z1bGxOYW1lAHNl
dF9Vc2VyTmFtZQBzZXRfSG9zdE5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBX
cml0ZUxpbmUAQ29tYmluZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVz
b3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRp
bmdzQmFzZQBEaXNwb3NlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0
cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBF
ZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRy
YWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1
cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25S
ZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5
cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5
Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUA
c2V0X1ZhbHVlAEdldFNlbnNpdGl2ZVZhbHVlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25p
bmcAVG9TdHJpbmcAc2V0X0V4ZWN1dGFibGVQYXRoAFJlbW90ZVBhdGgAc2V0X0RlYnVnTG9nUGF0
aABzZXRfU2Vzc2lvbkxvZ1BhdGgARXNjYXBlRmlsZU1hc2sATWljcm9zb2Z0LlNxbFNlcnZlci5T
Y3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVHJhbnNs
YXRlUmVtb3RlUGF0aFRvTG9jYWwAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1v
ZGVsAFNUX2YyNDViZDVmYjRiNTQ3ZjVhNGZlNWRkZTM4ZjE2MzJjLmRsbABzZXRfUHJvdG9jb2wA
Z2V0X0l0ZW0AU3lzdGVtAEVudW0AcmVzb3VyY2VNYW4AVG9Cb29sZWFuAFRpbWVTcGFuAE9wZW4A
U2NyaXB0TWFpbgBTZXNzaW9uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0
aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEV4Y2VwdGlvbgBSZW1vdGVGaWxlSW5mbwBDdWx0dXJlSW5m
bwBnZXRfUmVzb3VyY2VNYW5hZ2VyAEV2ZW50c09iamVjdFdyYXBwZXIARmlyZUVycm9yAElFbnVt
ZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBzZXRf
VGltZW91dEluTWlsbGlzZWNvbmRzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lz
dGVtLlJlc291cmNlcwBTVF8yNmU5YWZmMTllNzE0MmNlOWI1NjA0Mjg3OTdmOTBhZC5Qcm9wZXJ0
aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfMjZlOWFmZjE5ZTcxNDJj
ZTliNTYwNDI4Nzk3ZjkwYWQuUHJvcGVydGllcwBnZXRfVmFyaWFibGVzAEVudW1lcmF0ZVJlbW90
ZUZpbGVzAFNldHRpbmdzAFN5c3RlbS5XaW5kb3dzLkZvcm1zAFN5c3RlbS5Db2xsZWN0aW9ucwBT
ZXNzaW9uT3B0aW9ucwBFbnVtZXJhdGlvbk9wdGlvbnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJl
c3VsdHMAZ2V0X0V2ZW50cwBDb25jYXQARm9ybWF0AE9iamVjdABXaW5TQ1BuZXQAZ2V0X0RlZmF1
bHQARGlhbG9nUmVzdWx0AHNldF9UYXNrUmVzdWx0AGdldF9DdXJyZW50AENvbnZlcnQAQXJyYXlM
aXN0AHNldF9UaW1lb3V0AE1vdmVOZXh0AFNob3cATWVzc2FnZUJveABnZXRfQXNzZW1ibHkAZ2V0
X0lzRGlyZWN0b3J5AAAAAAApJABQAGEAYwBrAGEAZwBlADoAOgB3AGkAbgBTAEMAUABQAGEAdABo
AABDJABQAGEAYwBrAGEAZwBlADoAOgBGAFQAUABfAEMAQwBQAEwAXwBTAGUAcgB2AGUAcgBVAHMA
ZQByAE4AYQBtAGUAAEMkAFAAYQBjAGsAYQBnAGUAOgA6AEYAVABQAF8AQwBDAFAATABfAFMAZQBy
AHYAZQByAFAAYQBzAHMAdwBvAHIAZAAAOyQAUABhAGMAawBhAGcAZQA6ADoARgBUAFAAXwBDAEMA
UABMAF8AUwBlAHIAdgBlAHIATgBhAG0AZQAASSQAUABhAGMAawBhAGcAZQA6ADoARgBUAFAAXwBD
AEMAUABMAF8ARABvAHcAbgBsAG8AYQBkAEQAaQByAGUAYwB0AG8AcgB5AAAnJABQAGEAYwBrAGEA
ZwBlADoAOgB3AGkAbgBTAEMAUABMAG8AZwAALyQAUABhAGMAawBhAGcAZQA6ADoAdwBpAG4AUwBD
AFAATABvAGcAUABhAHQAaAAAPSQAUABhAGMAawBhAGcAZQA6ADoARgBUAFAAXwBDAEMAUABMAF8A
SQBuAHAAdQB0AEYAbwBsAGQAZQByAAA7JABQAGEAYwBrAGEAZwBlADoAOgBGAFQAUABfAEMAQwBQ
AEwAXwBTAGUAcgB2AGUAcgBQAG8AcgB0AAAfQwB1AHMAdABJAG4AcAB1AHQARgBvAGwAZABlAHIA
AClXAGkAbgBzAGMAcABTAGUAcwBzAGkAbwBuAEwAbwBnAC4AdAB4AHQAACVXAGkAbgBzAGMAcABE
AGUAYgB1AGcATABvAGcALgB0AHgAdAAAL0QAbwB3AG4AbABvAGEAZABpAG4AZwAgAGYAaQBsAGUA
IAB7ADAAfQAuAC4ALgAAH3IAZQBtAG8AdABlAEYAaQBsAGUAUABhAHQAaAA9AAAnRABvAHcAbgBs
AG8AYQBkAEQAaQByAGUAYwB0AG8AcgBpAGUAcwAAW0UAcgByAG8AcgAgAHcAaABlAG4AIAB1AHMA
aQBuAGcAIABXAGkAbgBTAEMAUAAgAHQAbwAgAGQAbwB3AG4AbABvAGEAZAAgAGYAaQBsAGUAOgAg
AHsAMAB9AABxUwBUAF8AMgA2AGUAOQBhAGYAZgAxADkAZQA3ADEANAAyAGMAZQA5AGIANQA2ADAA
NAAyADgANwA5ADcAZgA5ADAAYQBkAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQBy
AGMAZQBzAAAAAABjefDFn9xZR5l21iWMNhmEAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFxHQcQ
Dg4ODgIODg4RRRJJEk0SURUSVQESWRJZDhJdBCAAEn0FIAASgIEGIAESgIUcAyAAHAMgAA4EAAEC
HAQAAQYOBQACDg4OCCAFAQgICAgIBiABARGAlQYgAQERgJkFIAEBEUUFIAEBEk0OIAMVEoCdARJZ
Dg4RgKEHFRKAnQESWQggABUSVQETAAYVElUBElkEIAATAAYAAw4ODg4DIAACBCABCBwFAAIBDhwE
AAEODgYAARGAsQ4EIAEBHAUgABKAvQUAAg4OHAggBQIIDg4OCAgAARKAwRGAxQUgABKAyQcgAgEO
EoDJCLd6XFYZNOCJCImEXc2AgMyRCCJx7Eo8VtC/BAAAAAAEAQAAAAIGHAMGEmkDBhJtAwYSEAIG
CAMGERQEAAASaQQAABJtBQABARJtBAAAEhADAAABAygAHAQIABJpBAgAEm0ECAASEAgBAAgAAAAA
AB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfMjZlOWFmZjE5
ZTcxNDJjZTliNTYwNDI4Nzk3ZjkwYWQAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMAAASQEA
Gi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVU
IEZyYW1ld29yayA0LjUAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3Vy
Y2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVi
bGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNv
dXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAcDkAAAAAAAAAAAAAijkAAAAgAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAHw5AAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8l
ACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAA
AFhAAAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAA
vQTv/gAAAQAAAAEA73KUHAAAAQDvcpQcPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAAB
AFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAA
AAAAALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAw
ADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkA
TgBhAG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABT
AFQAXwAyADYAZQA5AGEAZgBmADEAOQBlADcAMQA0ADIAYwBlADkAYgA1ADYAMAA0ADIAOAA3ADkA
NwBmADkAMABhAGQAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwAz
ADEANgAuADIAOQA0ADIAMwAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQA
XwBmADIANAA1AGIAZAA1AGYAYgA0AGIANQA0ADcAZgA1AGEANABmAGUANQBkAGQAZQAzADgAZgAx
ADYAMwAyAGMALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMA
bwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIAMAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBk
AGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0A
ZQAAAFMAVABfAGYAMgA0ADUAYgBkADUAZgBiADQAYgA1ADQANwBmADUAYQA0AGYAZQA1AGQAZABl
ADMAOABmADEANgAzADIAYwAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAA
AABTAFQAXwAyADYAZQA5AGEAZgBmADEAOQBlADcAMQA0ADIAYwBlADkAYgA1ADYAMAA0ADIAOAA3
ADkANwBmADkAMABhAGQAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADcAMwAxADYALgAyADkANAAyADMAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQBy
AHMAaQBvAG4AAAAxAC4AMAAuADcAMwAxADYALgAyADkANAAyADMAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAnDkAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\LoopAllCustomers\UploadDirectoriestoDBByCustomer"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{799C4056-7D46-43BE-B5B0-1DC75DF9E6AE}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="UploadDirectoriestoDBByCustomer"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_8fd576518de749efa936ee78b134acc2"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::CustomerID,User::CustomerLists,User::CustSC,User::DownloadDirectories">
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_8fd576518de749efa936ee78b134acc2.Properties.Settings.get_Default():ST_8fd576518de749efa936ee78b134acc2.Properties.Sett" +
    "ings")]

namespace ST_8fd576518de749efa936ee78b134acc2.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.OleDb;
#endregion

namespace ST_8fd576518de749efa936ee78b134acc2
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here
            OleDbDataAdapter oleDA = new OleDbDataAdapter();
            DataTable dt = new DataTable();
            string sMsg="";

            ///MessageBox.Show(Dts.Variables["User::CustomerID"].Value.ToString() + "-" + Dts.Variables["CustSC"].Value.ToString());

            //oleDA.Fill(dt, Dts.Variables["User::DownloadDirectories"].Value);
            oleDA.Fill(dt, Dts.Variables["User::CustomerLists"].Value);

            //User::CustomerID,User::CustomerLists,User::CustSC,User::DownloadDirectories

            foreach (DataRow r in dt.Rows)
            {
                object[] array = r.ItemArray;
                sMsg = sMsg + array[0].ToString() +"-"+ array[1].ToString() + "-" + array[2].ToString();
                MessageBox.Show(sMsg);
            }

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}

    internal class Datacolumn
    {
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ST_8fd576518de749efa936ee78b134acc2.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{510c822e-7885-4261-b45f-4c93a6f6c326}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_8fd576518de749efa936ee78b134acc2</RootNamespace>
    <AssemblyName>ST_8fd576518de749efa936ee78b134acc2</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex=""></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_8fd576518de749efa936ee78b134acc2</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_8fd576518de749efa936ee78b134acc2</msb:DisplayName>
    <msb:ProjectId>{E4CFA4D4-EEB8-4597-A762-7AD2FCDDA5C8}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_8fd576518de749efa936ee78b134acc2.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_8fd576518de749efa936ee78b134acc2")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_8fd576518de749efa936ee78b134acc2")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_8fd576518de749efa936ee78b134acc2.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_8fd576518de749efa936ee78b134acc2.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_8fd576518de749efa936ee78b134acc2.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_8fd576518de749efa936ee78b134acc2.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_8fd576518de749efa936ee78b134acc2.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_8fd576518de749efa936ee78b134acc2.dll">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
yQQGAIkAyQQGACkBvQBmACkBcgZvAKkAyQR1AMkAyQQGAAgAFACPAAgAGACUACkAcwD8AC4ACwDU
AC4AEwDdAC4AGwD8AC4AIwAFAS4AKwAuAS4AMwAuAS4AOwAuAS4AQwAFAS4ASwA0AS4AUwAuAS4A
WwBLAUMAYwCUAEkAcwD8AGEAewCUAIMAawCUABsABAABAAUAAwAAAI4ExQAAABwBygAAABMGzwAC
AAUAAwACAAYABQABAAcABQACAAgABwAEgAAAAQAAAJQcB3YAAAAAAAABAAAABAAAAAAAAAAAAAAA
fQBzAAAAAAAOAAAAAAAAAAAAAACGAFwDAAAAAAQAAAAAAAAAAAAAAH0AVQAAAAAABAAAAAAAAAAA
AAAAfQACBAAAAAAOAAAAAAAAAAAAAACGAC4AAAAAAAQAAAAAAAAAAAAAAH0AsgUAAAAAAAAAAAEA
AAAaBQAABgACAAAAAAAAU1RfOGZkNTc2NTE4ZGU3NDllZmE5MzZlZTc4YjEzNGFjYzIAPE1vZHVs
ZT4ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lzdGVtLkRhdGEAU3lz
dGVtLkRhdGEuT2xlRGIAbXNjb3JsaWIAZGVmYXVsdEluc3RhbmNlAERhdGFUYWJsZQBWYXJpYWJs
ZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBNaWNyb3Nv
ZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFR5cGUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3Vs
dHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEludGVybmFs
RGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAERpc3Bvc2UARWRpdG9y
QnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2Vy
Q29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0
ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdl
dEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1i
bHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFz
c2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2Ny
aXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRp
bWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5W
ZXJzaW9uaW5nAFRvU3RyaW5nAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3Nv
ZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3Rl
bS5Db21wb25lbnRNb2RlbABTVF84ZmQ1NzY1MThkZTc0OWVmYTkzNmVlNzhiMTM0YWNjMi5kbGwA
RmlsbABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAERhdGFjb2x1
bW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxl
Y3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24AQ3VsdHVyZUluZm8AZ2V0X1Jlc291cmNlTWFuYWdlcgBP
bGVEYkRhdGFBZGFwdGVyAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5
c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5S
ZXNvdXJjZXMAU1RfOGZkNTc2NTE4ZGU3NDllZmE5MzZlZTc4YjEzNGFjYzIuUHJvcGVydGllcy5S
ZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUXzhmZDU3NjUxOGRlNzQ5ZWZhOTM2
ZWU3OGIxMzRhY2MyLlByb3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBTZXR0aW5ncwBTeXN0ZW0uV2lu
ZG93cy5Gb3JtcwBTeXN0ZW0uQ29sbGVjdGlvbnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3Vs
dHMAZ2V0X1Jvd3MAQ29uY2F0AE9iamVjdABnZXRfRGVmYXVsdABEaWFsb2dSZXN1bHQAc2V0X1Rh
c2tSZXN1bHQAZ2V0X0N1cnJlbnQATW92ZU5leHQARGF0YVJvdwBTaG93AE1lc3NhZ2VCb3gAZ2V0
X0l0ZW1BcnJheQBnZXRfQXNzZW1ibHkAAAABACdVAHMAZQByADoAOgBDAHUAcwB0AG8AbQBlAHIA
TABpAHMAdABzAAADLQABcVMAVABfADgAZgBkADUANwA2ADUAMQA4AGQAZQA3ADQAOQBlAGYAYQA5
ADMANgBlAGUANwA4AGIAMQAzADQAYQBjAGMAMgAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUA
cwBvAHUAcgBjAGUAcwAAAAAAZPV/6DoEok6z9sQlj5iDMgAEIAEBCAMgAAEFIAEBEREEIAEBDgUg
AQERXQsHBRI9DhJBHRwSSQQgABJxBCAAEnUFIAESeRwDIAAcBiACCBI9HAQgABJ9BCAAEkEEIAAd
HAMgAA4FAAEOHQ4GAAERgJEOAyAAAggAARKAlRGAmQUgABKAnQcgAgEOEoCdCLd6XFYZNOCJCImE
Xc2AgMyRBAAAAAAEAQAAAAMGElUDBhJZAwYSFAIGCAMGERgEAAASVQQAABJZBQABARJZBAAAEhQD
AAABBAgAElUECAASWQQIABIUCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dz
AQgBAAIAAAAAACgBACNTVF84ZmQ1NzY1MThkZTc0OWVmYTkzNmVlNzhiMTM0YWNjMgAABQEAAAAA
FgEAEUNvcHlyaWdodCBAICAyMDIwAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQO
FEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNQAAALQAAADOyu++AQAAAJEA
AABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4w
LjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5
c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAAw
MAAAAAAAAAAAAABKMAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPDAAAAAAAAAAAAAAAABfQ29y
RGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAAGgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAAd2lBwAAAEAB3aUHD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBHoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAw
ADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEA
bgB5AE4AYQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAA
AAAAUwBUAF8AOABmAGQANQA3ADYANQAxADgAZABlADcANAA5AGUAZgBhADkAMwA2AGUAZQA3ADgA
YgAxADMANABhAGMAYwAyAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAu
ADcAMwAxADYALgAzADAAMgAxADUAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAA
UwBUAF8AOABmAGQANQA3ADYANQAxADgAZABlADcANAA5AGUAZgBhADkAMwA2AGUAZQA3ADgAYgAx
ADMANABhAGMAYwAyAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQA
AABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAyADAAAAAqAAEAAQBMAGUAZwBhAGwAVABy
AGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4A
YQBtAGUAAABTAFQAXwA4AGYAZAA1ADcANgA1ADEAOABkAGUANwA0ADkAZQBmAGEAOQAzADYAZQBl
ADcAOABiADEAMwA0AGEAYwBjADIALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0A
ZQAAAAAAUwBUAF8AOABmAGQANQA3ADYANQAxADgAZABlADcANAA5AGUAZgBhADkAMwA2AGUAZQA3
ADgAYgAxADMANABhAGMAYwAyAAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAA
MQAuADAALgA3ADMAMQA2AC4AMwAwADIAMQA1AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABW
AGUAcgBzAGkAbwBuAAAAMQAuADAALgA3ADMAMQA2AC4AMwAwADIAMQA1AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAFwwAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\LoopAllCustomers.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{20DCF63F-F794-4013-8930-CE8339D2948D}"
          DTS:From="Package\LoopAllCustomers\GettAllDirectoryListsfromFTPByCustomer"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\LoopAllCustomers\UploadDirectoriestoDBByCustomer" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{4F6AD5B8-17DD-4488-9CF5-329AC30A8AB2}"
          DTS:ObjectName="{4F6AD5B8-17DD-4488-9CF5-329AC30A8AB2}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::CustomerID" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{4DA6245E-D950-4506-8BD3-86F1DA49593B}"
          DTS:ObjectName="{4DA6245E-D950-4506-8BD3-86F1DA49593B}"
          DTS:ValueIndex="1"
          DTS:VariableName="User::CustSC" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{3BFBC621-54D0-4373-98B1-FB3F247DBB1B}"
          DTS:ObjectName="{3BFBC621-54D0-4373-98B1-FB3F247DBB1B}"
          DTS:ValueIndex="2"
          DTS:VariableName="User::CustInputFolder" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\LoopThroughEachFolders"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:Disabled="True"
      DTS:DTSID="{9F170C30-D6D0-496A-B02E-3F8F2EDF457F}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="LoopThroughEachFolders">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachFromVarEnumerator"
        DTS:DTSID="{CCEB3BB8-DF1D-4798-A89A-D0603C22E1FB}"
        DTS:ObjectName="{CCEB3BB8-DF1D-4798-A89A-D0603C22E1FB}">
        <DTS:ObjectData>
          <FEEFVE
            VariableName="User::DownloadDirectories" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\LoopThroughEachFolders\UploadAllDirectorytoDatabase"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{CD14AEE4-1C7B-4220-B020-BF45B43474EF}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="UploadAllDirectorytoDatabase"
          DTS:ThreadHint="2">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{460708B4-0056-4954-98AA-8146CEBC02BA}"
              SQLTask:SqlStatementSource="INSERT INTO IE_FTPDirectoryByCustomer&#xA;                  (Cust_ID, Process_date, DirPath, NoOfFiles)&#xA;VALUES (?,?,?,0)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::CustomerID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="User::ProcessDT"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="7"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::DownloadDirectory"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{0ABA3FC4-FAE7-41D7-88F9-430D31AB3E02}"
          DTS:ObjectName="{0ABA3FC4-FAE7-41D7-88F9-430D31AB3E02}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::DownloadDirectory" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\UploadAllDirectorytoByCustomerDatabase"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{e7027c98-8003-4e74-b1e8-9c9b78dab55f}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="UploadAllDirectorytoByCustomerDatabase"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{460708B4-0056-4954-98AA-8146CEBC02BA}"
          SQLTask:SqlStatementSource="INSERT INTO IE_FTPDirectoryByCustomer&#xA;                  (Cust_ID, Process_date, DirPath, NoOfFiles)&#xA;VALUES (?,?,?,0)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::CustomerID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="1"
            SQLTask:DtsVariableName="User::ProcessDT"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="7"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="2"
            SQLTask:DtsVariableName="User::DownloadDirectory"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{BE35127E-578A-4C16-A311-71E29D6A13B3}"
      DTS:From="Package\GettAllDirectoryListsfromFTP"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\LoopThroughEachFolders" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{B99CECDA-9111-4989-B101-E4704C8B9CBD}"
      DTS:From="Package\LoopThroughEachFolders"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\DownloadAllFilesFromUploadedDirectory" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{8FC847F7-ADFA-4E60-8EA5-B6359B034AF2}"
      DTS:From="Package\GetAllCustomersfromDB"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\LoopAllCustomers" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="268.8,41.6"
          Id="Package\DownloadAllFilesFromUploadedDirectory"
          TopLeft="408.666651858225,315.840002115885" />
        <NodeLayout
          Size="268.8,41.6"
          Id="Package\DownloadAllFilesFromUploadedDirectory 1"
          TopLeft="57.9999991257993,417.06666958703" />
        <NodeLayout
          Size="192,41.6"
          Id="Package\GetAllCustomersfromDB"
          TopLeft="69.9999972184501,33.6000001653035" />
        <NodeLayout
          Size="213.6,41.6"
          Id="Package\GettAllDirectoryListsfromFTP"
          TopLeft="434.666649394566,23.5733335206773" />
        <NodeLayout
          Size="270.4,41.6"
          Id="Package\LoopAllCustomers\GettAllDirectoryListsfromFTPByCustomer"
          TopLeft="28.5333308961661,11.0933344959683" />
        <NodeLayout
          Size="241.6,41.6"
          Id="Package\LoopAllCustomers\UploadDirectoriestoDBByCustomer"
          TopLeft="48.9333298630186,93.2266682150099" />
        <EdgeLayout
          Id="Package\LoopAllCustomers.PrecedenceConstraints[Constraint]"
          TopLeft="166.733330379592,52.6933344959683">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,40.5333337190416"
              Start="0,0"
              End="0,33.0333337190416">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,33.0333337190416" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="334.4,189.6"
          Size="334.4,232.8"
          Id="Package\LoopAllCustomers"
          TopLeft="26.6666656070286,108.480000760396" />
        <NodeLayout
          Size="217.6,41.6"
          Id="Package\LoopThroughEachFolders\UploadAllDirectorytoDatabase"
          TopLeft="35.59998275439,5.70666790093296" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="295.2,102.4"
          Size="295.2,145.6"
          Id="Package\LoopThroughEachFolders"
          TopLeft="398.666650825077,106.339998809814" />
        <NodeLayout
          Size="275.2,41.6"
          Id="Package\UploadAllDirectorytoByCustomerDatabase"
          TopLeft="62.13331627316,364.746669520908" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="543.866650109822,65.1733335206773">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,41.1666652891368"
              Start="0,0"
              End="0,33.6666652891368">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,33.6666652891368" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="544.666651341651,251.939998809814">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,63.9000033060713"
              Start="0,0"
              End="0,56.4000033060713">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,56.4000033060713" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="165.99999721845,75.2000001653036">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="27.8666683885785,33.2800005950929"
              Start="0,0"
              End="27.8666683885785,25.7800005950929">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,12.6400002975465" />
                  <mssgle:CubicBezierSegment
                    Point1="0,12.6400002975465"
                    Point2="0,16.6400002975465"
                    Point3="4,16.6400002975465" />
                  <mssgle:LineSegment
                    End="23.8666683885785,16.6400002975465" />
                  <mssgle:CubicBezierSegment
                    Point1="23.8666683885785,16.6400002975465"
                    Point2="27.8666683885785,16.6400002975465"
                    Point3="27.8666683885785,20.6400002975465" />
                  <mssgle:LineSegment
                    End="27.8666683885785,25.7800005950929" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>